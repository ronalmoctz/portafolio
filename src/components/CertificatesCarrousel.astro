---
import { certificateData } from "src/constants/certificates";
import RightArrow from "src/icons/RightArrow.astro";
import LeftArrow from "src/icons/LeftArrow.astro";
---

<section class="pt-36 mx-auto">
  <h1
    class="bg-gradient-to-bl from-violet-400 via-purple-600 to-fuchsia-700 text-4xl md:text-7xl font-bold py-8 inline-block text-transparent bg-clip-text"
  >
    Certificados
  </h1>

  <div class="relative w-full overflow-hidden rounded-2xl">
    <div
      class="flex overflow-x-scroll md:overflow-x-hidden no-scrollbar gap-x-12 mt-8 p-16 md:[mask-image:linear-gradient(90deg,transparent,white_20%,white_80%,transparent)]"
      id="carousel-container"
    >
      {
        certificateData.map((certificates, index) => (
          <article class="carousel-item shrink-0 bg-gray-800/90 rounded-2xl w-[260px] md:w-[400px] h-[380px] md:h-[520px] flex flex-col">
            <div class="pt-4 px-4 w-[260px] h-[180px] md:w-[400px] md:h-[350px] flex justify-center">
              <img
                src={certificates.image}
                alt={certificates.title}
                class="w-full h-full object-cover rounded-2xl shadow-[rgba(6,_24,_44,_0.4)_0px_0px_0px_2px,_rgba(6,_24,_44,_0.65)_0px_4px_6px_-1px,_rgba(255,_255,_255,_0.08)_0px_1px_0px_inset]"
              />
            </div>
            <div class="pt-4 px-4 md:px-8 text-gray-300 flex-1">
              <h1 class="font-semibold text-sm md:text-base">
                {certificates.title} - {certificates.date}
              </h1>
              <p class="pt-3 font-normal text-xs md:text-sm text-pretty">
                {certificates.description}
              </p>
              <div class="flex flex-wrap gap-2 mt-3">
                {certificates.icons.map((icon) => (
                  <div class="inline-flex bg-gradient-to-br from-neutral-200 to-neutral-400 px-2 rounded-full">
                    <img
                      src={icon.src}
                      alt=""
                      class="w-10 h-7 md:w-14 md:h-8 p-1"
                    />
                  </div>
                ))}
              </div>
            </div>
          </article>
        ))
      }
    </div>

    <div class="hidden md:flex absolute bottom-1 right-4 gap-2">
      <button
        id="left-button"
        class="w-12 h-12 rounded-full bg-gray-800/80 backdrop-blur-sm border border-gray-600 text-gray-300 0 transition-all duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Certificado anterior"
      >
        <LeftArrow />
      </button>
      <button
        id="right-button"
        class="w-12 h-12 rounded-full bg-gray-800/80 backdrop-blur-sm border border-gray-600 text-gray-300 transition-all duration-200 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Siguiente certificado"
      >
        <RightArrow />
      </button>
    </div>
  </div>
</section>

<style>
  /* Ocultar scrollbar */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }
  .no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carouselContainer = document.getElementById("carousel-container");
    const rightButton = document.getElementById("right-button");
    const leftButton = document.getElementById("left-button");
    const scrollAmount = 350;

    // Funci칩n para navegar el carousel
    function scrollCarousel(direction) {
      if (!carouselContainer) return;

      const scrollLeft = direction === "right" ? scrollAmount : -scrollAmount;
      carouselContainer.scrollBy({ left: scrollLeft, behavior: "smooth" });
    }

    // Funci칩n para actualizar el estado de los botones
    function updateButtonState() {
      if (!carouselContainer || !leftButton || !rightButton) return;

      const { scrollLeft, scrollWidth, clientWidth } = carouselContainer;
      const isAtStart = scrollLeft <= 10; // Peque침a tolerancia para valores flotantes
      const isAtEnd = scrollLeft + clientWidth >= scrollWidth - 10;

      // Actualizar estado disabled
      leftButton.disabled = isAtStart;
      rightButton.disabled = isAtEnd;

      // Feedback visual adicional
      if (isAtStart) {
        leftButton.classList.add("opacity-50");
      } else {
        leftButton.classList.remove("opacity-50");
      }

      if (isAtEnd) {
        rightButton.classList.add("opacity-50");
      } else {
        rightButton.classList.remove("opacity-50");
      }
    }

    // Event listeners para los botones
    if (rightButton && carouselContainer) {
      rightButton.addEventListener("click", () => {
        scrollCarousel("right");
      });
    }

    if (leftButton && carouselContainer) {
      leftButton.addEventListener("click", () => {
        scrollCarousel("left");
      });
    }

    // Event listeners para actualizar el estado de los botones
    if (carouselContainer) {
      carouselContainer.addEventListener("scroll", updateButtonState);
      window.addEventListener("load", () => {
        updateButtonState();
      });

      // Verificaci칩n inicial del estado
      setTimeout(updateButtonState, 100);
    }
  });
</script>
