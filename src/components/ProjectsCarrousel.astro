---
import { project } from "src/constants/projects";
import ShareIcon from "src/icons/ShareIcon.astro";
import LeftArrow from "src/icons/LeftArrow.astro";
import RightArrow from "src/icons/RightArrow.astro";
---

<section class="pt-20 md:pt-36 mx-auto ml-8">
  <h1
    class="text-4xl bg-gradient-to-bl from-sky-500 via-sky-600 to-blue-800
    md:text-7xl font-bold py-8 inline-block text-transparent bg-clip-text"
  >
    Proyectos
  </h1>

  <div
    class="flex overflow-x-scroll no-scrollbar gap-x-12 mt-8 carousel custom-scrollbar"
    id="carousel"
  >
    {
      project.map(async (project) => {
        const icons = Array.isArray(project.tecs)
          ? await Promise.all(
              project.tecs.map(async (iconPath) => {
                const { default: IconComponent } = await import(iconPath);
                return IconComponent;
              })
            )
          : [];

        return (
          <a
            href={project.link}
            target="_blank"
            rel="noopener noreferrer"
            class="group shrink-0 bg-gray-700 rounded-2xl
            bg-clip-padding backdrop-filter backdrop-blur-md
             bg-opacity-20 w-[750px] h-[610px] text-gray-300 relative transition-transform hover:scale-[1.01]"
            aria-label={`Ir al proyecto ${project.title}`}
          >
            <article class="w-full h-full flex flex-col">
              <div class="pt-4 px-4 w-full h-[450px] flex justify-center">
                <img
                  src={project.image}
                  alt={project.title}
                  aria-label="img-projects"
                  class="w-full h-full object-cover rounded-2xl shadow-[0px_4px_13px_1px_rgba(0,_0,_0,_0.1)]"
                />
              </div>

              <div class="px-4 pb-4 pt-2 relative flex flex-col gap-3">
                <h1 class="font-semibold text-base">{project.title}</h1>
                <h2 class="font-normal text-sm text-pretty">
                  {project.description}
                </h2>

                {icons.length > 0 && (
                  <div class="flex gap-2 mt-2 flex-wrap items-center">
                    {icons.map((Icon, idx) => (
                      <div
                        class="w-8 h-8 p-1  flex items-center justify-center "
                        title={project.tecs[idx]
                          .split("/")
                          .pop()
                          ?.replace(".astro", "")}
                      >
                        <Icon class="w-5 h-5 text-white" />
                      </div>
                    ))}
                  </div>
                )}

                <ShareIcon class="absolute bottom-4 right-4 transition-transform duration-200 ease-in-out transform group-hover:scale-105 opacity-80 group-hover:opacity-90" />
              </div>
            </article>
          </a>
        );
      })
    }
  </div>

  <div class="hidden md:flex items-center gap-x-4 mt-8 justify-end">
    <button
      class="rounded-full border p-1 transition-all"
      id="left-button"
      aria-label="Ir al elemento anterior"
    >
      <LeftArrow />
    </button>
    <button
      class="rounded-full border p-1 transition-all"
      id="right-button"
      aria-label="Ir al siguiente elemento"
    >
      <RightArrow />
    </button>
  </div>
</section>

<style>
  .custom-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .custom-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .carousel {
    overflow: hidden;
    mask: linear-gradient(
      90deg,
      transparent,
      white,
      20%,
      white 90%,
      transparent
    );
  }

  @media (max-width: 768px) {
    .carousel {
      mask: none;
    }
  }
</style>

<script>
  const carouselContainer = document.querySelector("#carousel");
  const rightButton = document.querySelector("#right-button");
  const leftButton = document.querySelector("#left-button");

  const scrollAmount = 350;

  rightButton.addEventListener("click", () => {
    carouselContainer.scrollBy({ left: scrollAmount, behavior: "smooth" });
  });

  leftButton.addEventListener("click", () => {
    carouselContainer.scrollBy({ left: -scrollAmount, behavior: "smooth" });
  });

  const updateButtonState = () => {
    const { scrollLeft, scrollWidth, clientWidth } = carouselContainer;

    leftButton.disabled = scrollLeft === 0;
    rightButton.disabled = scrollLeft + clientWidth >= scrollWidth;
  };

  const handleResize = () => {
    if (window.innerWidth <= 768) {
      carouselContainer.style.overflowX = "scroll";
    } else {
      carouselContainer.style.overflowX = "hidden";
    }
  };

  carouselContainer.addEventListener("scroll", updateButtonState);
  window.addEventListener("load", () => {
    updateButtonState();
    handleResize();
  });
  window.addEventListener("resize", handleResize);
</script>
