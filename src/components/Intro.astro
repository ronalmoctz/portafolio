---
import ButtonCV from "./ButtonCV.astro";
import SectionContainer from "./SectionContainer.astro";
---

<SectionContainer>
  <section class="intro-canvas-container" id="textContainer"></section>
  <div
    style="display: flex; justify-content: center; width: 100%; margin-top: 2rem;"
  >
    <ButtonCV />
  </div>
</SectionContainer>

<style>
  .intro-canvas-container {
    position: relative;
    width: 100%;
    height: 80vh;
    margin-top: 100px;
    min-height: 320px;
    max-width: 100vw;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  @media (max-width: 600px) {
    .intro-canvas-container {
      height: 55vh;
      min-height: 180px;
      margin-top: 40px;
    }
  }
  #textContainer canvas {
    position: absolute;
    top: 0;
    left: 0;
    width: 100% !important;
    height: 100% !important;
    display: block;
    background: transparent !important;
  }
</style>
<script src="https://unpkg.com/three@0.155.0/build/three.min.js"></script>
<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const textContainer = document.getElementById("textContainer");
    if (!textContainer || !window.THREE) return;
    let easeFactor = 0.02;
    let scene, camera, renderer, planeMesh;
    let mousePosition = { x: 0.5, y: 0.5 };
    let targetMousePosition = { x: 0.5, y: 0.5 };
    let prevPosition = { x: 0.5, y: 0.5 };
    const vertexShader = `
    varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }
    `;
    const fragmentShader = `
    varying vec2 vUv;
    uniform sampler2D u_texture;
    uniform vec2 u_mouse;
    uniform vec2 u_prevMouse;
    void main() {
      vec2 gridUV = floor(vUv * vec2(40.0, 40.0)) / vec2(40.0, 40.0);
      vec2 centerOfPixel = gridUV + vec2(1.0/40.0, 1.0/40.0);
      vec2 mouseDirection = u_mouse - u_prevMouse;
      vec2 pixelToMouse = centerOfPixel - u_mouse;
      float dist = length(pixelToMouse);
      float strength = smoothstep(0.3, 0.0, dist);
      vec2 uvOffset = strength * -mouseDirection * 0.3;
      vec2 uv = vUv - uvOffset;
      vec4 color = texture2D(u_texture, uv);
      gl_FragColor = color;
    }
    `;
    function createTextTexture(
      textLines,
      font,
      size,
      color,
      fontWeight = "100"
    ) {
      const scaleFactor = 4;
      // Usar el tamaño actual del contenedor para el canvas
      const canvasWidth = textContainer.offsetWidth * scaleFactor;
      const canvasHeight = textContainer.offsetHeight * scaleFactor;
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      ctx.clearRect(0, 0, canvasWidth, canvasHeight);
      ctx.fillStyle = "rgba(0,0,0,0)";
      ctx.fillRect(0, 0, canvasWidth, canvasHeight);
      // Escalar el texto según el tamaño del canvas
      const fontSize = size || Math.floor(canvasHeight * 0.22);
      ctx.font = `${fontWeight} ${fontSize}px "${font || "Recursive Variable"}"`;
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.imageSmoothingEnabled = true;
      ctx.imageSmoothingQuality = "high";
      const lineHeight = fontSize * 1.1;
      const totalHeight = lineHeight * textLines.length;
      ctx.strokeStyle = "#fff";
      ctx.lineWidth = fontSize * 0.01;
      textLines.forEach((line, i) => {
        const y =
          canvasHeight / 2 - totalHeight / 2 + lineHeight * i + lineHeight / 2;
        for (let j = 0; j < 2; j++) {
          ctx.strokeText(line, canvasWidth / 2, y);
        }
        ctx.fillStyle = "#fff";
        ctx.fillText(line, canvasWidth / 2, y);
      });
      return new window.THREE.CanvasTexture(canvas);
    }
    function initializeScene(texture) {
      scene = new window.THREE.Scene();
      const aspectRatio =
        textContainer.offsetWidth / textContainer.offsetHeight;
      camera = new window.THREE.OrthographicCamera(
        -1,
        1,
        1 / aspectRatio,
        -1 / aspectRatio,
        0.1,
        1000
      );
      camera.position.z = 1;
      const shaderUniforms = {
        u_mouse: { value: new window.THREE.Vector2() },
        u_prevMouse: { value: new window.THREE.Vector2() },
        u_texture: { value: texture },
      };
      planeMesh = new window.THREE.Mesh(
        new window.THREE.PlaneGeometry(2, 2),
        new window.THREE.ShaderMaterial({
          uniforms: shaderUniforms,
          vertexShader,
          fragmentShader,
        })
      );
      scene.add(planeMesh);
      renderer = new window.THREE.WebGLRenderer({
        antialias: true,
        alpha: true,
      });
      renderer.setSize(textContainer.offsetWidth, textContainer.offsetHeight);
      renderer.setPixelRatio(window.devicePixelRatio);
      textContainer.appendChild(renderer.domElement);
    }
    function reloadTexture() {
      const newTex = createTextTexture(
        ["RONALDO", "MOCTEZUMA"],
        "Recursive Variable",
        null,
        "#F7F7F7",
        "700"
      );
      planeMesh.material.uniforms.u_texture.value = newTex;
    }
    initializeScene(
      createTextTexture(
        ["RONALDO", "MOCTEZUMA"],
        "Recursive Variable",
        null,
        "#F7F7F7",
        "700"
      )
    );
    function animateScene() {
      requestAnimationFrame(animateScene);
      mousePosition.x += (targetMousePosition.x - mousePosition.x) * easeFactor;
      mousePosition.y += (targetMousePosition.y - mousePosition.y) * easeFactor;
      planeMesh.material.uniforms.u_mouse.value.set(
        mousePosition.x,
        1.0 - mousePosition.y
      );
      planeMesh.material.uniforms.u_prevMouse.value.set(
        prevPosition.x,
        1.0 - prevPosition.y
      );
      renderer.render(scene, camera);
    }
    animateScene();
    textContainer.addEventListener("mousemove", handleMouseMove);
    textContainer.addEventListener("mouseenter", handleMouseEnter);
    textContainer.addEventListener("mouseleave", handleMouseLeave);
    function handleMouseMove(event) {
      easeFactor = 0.04;
      const rect = textContainer.getBoundingClientRect();
      prevPosition = { ...targetMousePosition };
      targetMousePosition.x = (event.clientX - rect.left) / rect.width;
      targetMousePosition.y = (event.clientY - rect.top) / rect.height;
    }
    function handleMouseEnter(event) {
      easeFactor = 0.02;
      const rect = textContainer.getBoundingClientRect();
      mousePosition.x = targetMousePosition.x =
        (event.clientX - rect.left) / rect.width;
      mousePosition.y = targetMousePosition.y =
        (event.clientY - rect.top) / rect.height;
    }
    function handleMouseLeave() {
      easeFactor = 0.02;
      targetMousePosition = { ...prevPosition };
    }
    // Debounce para resize en móviles
    let resizeTimeout;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(onWindowResize, 150);
    }, false);
    function onWindowResize() {
      const aspectRatio =
        textContainer.offsetWidth / textContainer.offsetHeight;
      camera.left = -1;
      camera.right = 1;
      camera.top = 1 / aspectRatio;
      camera.bottom = -1 / aspectRatio;
      camera.updateProjectionMatrix();
      renderer.setSize(textContainer.offsetWidth, textContainer.offsetHeight);
      reloadTexture();
    }
  });
</script>
